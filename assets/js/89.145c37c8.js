(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{460:function(t,r,a){"use strict";a.r(r);var s=a(46),v=Object(s.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[t._v("#")]),t._v(" 字符串")]),t._v(" "),a("h2",{attrs:{id:"api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[t._v("#")]),t._v(" API")]),t._v(" "),a("p",[t._v("概述API(Application Progarmming Interface)：应用程序编程接口")]),t._v(" "),a("p",[t._v("sc.nextLine()返回是一个字符串类型的值")]),t._v(" "),a("h2",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("p",[t._v("String 类在java.lang包下，使用的时候不需要导包")]),t._v(" "),a("p",[t._v("String类代表字符串，java中所有的字符串文字都被为此类的实例，java中所有双引号字符串的偶数String类的对象")]),t._v(" "),a("p",[t._v("字符串不可变，它们的值在创建后不能被更改")]),t._v(" "),a("p",[t._v("虽然String的值是不可变，但它们可以被共享")]),t._v(" "),a("p",[t._v("字符串效果上相当于字符串数据(char[]),但是底层原理是字节数据(byte[])")]),t._v(" "),a("p",[t._v("JDK8以前是字符数据，JDK9及以后是字节数组")]),t._v(" "),a("h2",{attrs:{id:"string-构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-构造方法"}},[t._v("#")]),t._v(" String 构造方法")]),t._v(" "),a("p",[t._v("pubilic String()   创建一个空白字符串对象，不含有任何内容")]),t._v(" "),a("p",[t._v("pubilc String(char[] chs) \t根据字符数组的内容，来创建字符串对象")]),t._v(" "),a("p",[t._v("pubilc String(byte[] bys)\t根据字节数组的内容，来创建字符串对象")]),t._v(" "),a("p",[t._v("String s =“abc”\t直接以赋值方式创建字符串对象")]),t._v(" "),a("h2",{attrs:{id:"string-对象的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-对象的特点"}},[t._v("#")]),t._v(" String 对象的特点")]),t._v(" "),a("p",[t._v("通过new创建的字符串对象，每次new都会申请一个内存空间，虽然内存相同但内容地址不相同")]),t._v(" "),a("p",[t._v("以“”赋值方式创建的字符串对象，只有字符序列相同，jvm都只会建立一个String对象，并在字符串池中维护")]),t._v(" "),a("h2",{attrs:{id:"字符串的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串的比较"}},[t._v("#")]),t._v(" 字符串的比较")]),t._v(" "),a("p",[t._v("使用==作比较")]),t._v(" "),a("p",[t._v("基本类型：比较的是数据值是否相同")]),t._v(" "),a("p",[t._v("引用类型：比较的是地址值是否相同")]),t._v(" "),a("p",[t._v("字符串是对象，它比较内容是否相同，是通过一个方法来实现的，这个方法叫:equals()")]),t._v(" "),a("p",[t._v("public boolean equals(Object anObject)：将此字符串与指定对象进行比较")]),t._v(" "),a("h2",{attrs:{id:"遍历字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历字符串"}},[t._v("#")]),t._v(" 遍历字符串")]),t._v(" "),a("p",[t._v("根据索引获取字符串的指定字符")]),t._v(" "),a("p",[t._v("public char charAt(int index);")]),t._v(" "),a("p",[t._v("返回指定索引出的char值，字符串的索引也从0开始")]),t._v(" "),a("p",[t._v("获取字符串的长度")]),t._v(" "),a("p",[t._v("public int lengh(); 返回此字符串的长度")]),t._v(" "),a("p",[t._v("数组的长度：数组名.length")]),t._v(" "),a("p",[t._v("字符串的长度：字符串对象.length")]),t._v(" "),a("h2",{attrs:{id:"统计字符次数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统计字符次数"}},[t._v("#")]),t._v(" 统计字符次数")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("假如ch是一个字符，我要判断它属于大写字母，小写字母，还是数字，直接判断该字符是否在对应的范围即可\n大写字母：ch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Z'")]),t._v("\n小写字母： ch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'z'")]),t._v("\n数字： ch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'9'")]),t._v("\n")])])]),a("h2",{attrs:{id:"stringbuilder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringbuilder"}},[t._v("#")]),t._v(" StringBuilder")]),t._v(" "),a("p",[t._v("如果对字符串进行拼接操作，因为字符串是不可变类型，每次拼接都会构建一个新的string对象，我们可以使用StringBuilder类来解决浪费内存空间问题")]),t._v(" "),a("p",[t._v("StringBuilder是一个可变的字符串类")]),t._v(" "),a("h3",{attrs:{id:"构造方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),a("p",[t._v("pubilc StringBuilder()\t\t创建一个空白的可变字符串对象，没有任何内容")]),t._v(" "),a("p",[t._v("pubilc StringBuilder(String str)  根据字符串的内容，来创建可变字符串对象")]),t._v(" "),a("h3",{attrs:{id:"添加和反转方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#添加和反转方法"}},[t._v("#")]),t._v(" 添加和反转方法")]),t._v(" "),a("p",[t._v("public StringBuilder append(任意类型);添加数据，并返回对象本身")]),t._v(" "),a("p",[t._v("public StringBuilder reverse(); 返回相反的字符序列")]),t._v(" "),a("h3",{attrs:{id:"链式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式编程"}},[t._v("#")]),t._v(" 链式编程")]),t._v(" "),a("p",[t._v("如果一个对象被调用后返回对象自己本身，那么可以根据返回的对象继续调用方法")]),t._v(" "),a("p",[t._v("如str.append().append().append().append();")]),t._v(" "),a("p",[t._v("因为str是 StringBuilder对象，而 StringBuilder对象的append方法是添加数据后并返回对象本身，所以可以写为链式编程")]),t._v(" "),a("h2",{attrs:{id:"string与stringbuilder相互转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string与stringbuilder相互转换"}},[t._v("#")]),t._v(" String与Stringbuilder相互转换")]),t._v(" "),a("p",[t._v("public String toString() \t通过tostring()\t可以把stringbuilder 转换为string")]),t._v(" "),a("p",[t._v("pubilc stringbuilder(string s) 通过构造方法可以实现把string转换为stringbuilder")])])}),[],!1,null,null,null);r.default=v.exports}}]);