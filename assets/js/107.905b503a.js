(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{480:function(t,a,r){"use strict";r.r(a);var s=r(46),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"类名作为形参和返回值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类名作为形参和返回值"}},[t._v("#")]),t._v(" 类名作为形参和返回值")]),t._v(" "),r("p",[t._v("形参为类名时 则需要传递一个实例化的对象")]),t._v(" "),r("p",[t._v("返回值为类名时  则return一个实例化的对象")]),t._v(" "),r("h2",{attrs:{id:"抽象类作为形参和返回值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#抽象类作为形参和返回值"}},[t._v("#")]),t._v(" 抽象类作为形参和返回值")]),t._v(" "),r("p",[t._v("抽象类需要用多态形式创建对象 才能传参")]),t._v(" "),r("p",[t._v("返回值一致")]),t._v(" "),r("h2",{attrs:{id:"接口作为形参和返回值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#接口作为形参和返回值"}},[t._v("#")]),t._v(" 接口作为形参和返回值")]),t._v(" "),r("p",[t._v("需要重写接口的方法 并以多态形式 传参")]),t._v(" "),r("p",[t._v("返回值一致")])])}),[],!1,null,null,null);a.default=e.exports}}]);