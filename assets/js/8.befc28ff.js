(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{381:function(s,a,t){"use strict";t.r(a);var e=t(46),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"flume-进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flume-进阶"}},[s._v("#")]),s._v(" Flume 进阶")]),s._v(" "),t("h2",{attrs:{id:"flume-事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flume-事务"}},[s._v("#")]),s._v(" Flume 事务")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211111180016220.png",alt:"image-20211111180016220"}})]),s._v(" "),t("h2",{attrs:{id:"agent-内部原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#agent-内部原理"}},[s._v("#")]),s._v(" Agent 内部原理")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211111183315320.png",alt:"image-20211111183315320"}})]),s._v(" "),t("ol",[t("li",[t("p",[s._v("ChannelSelector")]),s._v(" "),t("p",[s._v("ChannelSelector的作用就是选出Event将要被发往哪个Channel。其共有两种类型，分别是Replicating（"),t("strong",[s._v("复制")]),s._v("）和Multiplexing（"),t("strong",[s._v("多路复用")]),s._v("）。  默认为Replicating（复制）\nReplicatingSelector会将同一个Event发往所有的Channel，Multiplexing会根据相应的原则，将不同的Event发往不同的Channel。")])]),s._v(" "),t("li",[t("p",[s._v("SinkProcessor")]),s._v(" "),t("p",[s._v("SinkProcessor共有三种类型，分别是DefaultSinkProcessor、LoadBalancingSinkProcessor和FailoverSinkProcessor")]),s._v(" "),t("ol",[t("li",[s._v("DefaultSinkProcessor对应的是单个的Sink")]),s._v(" "),t("li",[s._v("LoadBalancingSinkProcessor和FailoverSinkProcessor对应的是Sink Group，")]),s._v(" "),t("li",[s._v("LoadBalancingSinkProcessor可以实现负载均衡的功能")]),s._v(" "),t("li",[s._v("FailoverSinkProcessor可以错误恢复的功能。")])])])]),s._v(" "),t("h2",{attrs:{id:"flume-拓扑结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#flume-拓扑结构"}},[s._v("#")]),s._v(" Flume 拓扑结构")]),s._v(" "),t("h3",{attrs:{id:"简单串联"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单串联"}},[s._v("#")]),s._v(" 简单串联")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211111184745477.png",alt:"image-20211111184745477"}})]),s._v(" "),t("p",[s._v("这种模式是将多个flume顺序连接起来了，从最初的source开始到最终sink传送的目的存储系统。此模式不建议桥接过多的flume数量， flume数量过多不仅会影响传输速率，而且一旦传输过程中某个节点flume宕机，会影响整个传输系统。")]),s._v(" "),t("h4",{attrs:{id:"实现串联-输出到arvo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现串联-输出到arvo"}},[s._v("#")]),s._v(" 实现串联 输出到arvo")]),s._v(" "),t("p",[s._v("flume1 配置文件")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#agent1   netcatsource --\x3e memorychannel --\x3e arvosink")]),s._v("\na1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1  \na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" netcat \na1.sources.r1.bind "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop102\na1.sources.r1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22222")]),s._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置为arvosink 向指定地址:端口输出数据")]),s._v("\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arvo \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出数据的地址 ")]),s._v("\na1.sinks.k1.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop103\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出数据的地址")]),s._v("\na1.sinks.k1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33333")]),s._v("\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n\n\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n")])])]),t("p",[s._v("flume2 配置文件")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#agent2   netcatsource --\x3e memorychannel --\x3e loggersink")]),s._v("\na1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1\na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输入数据类型改为 arvo")]),s._v("\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arvo \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输入地址")]),s._v("\na1.sources.r1.bind "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop102\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输入端口")]),s._v("\na1.sources.r1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33333")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置为logger 写入到log文件 持久化")]),s._v("\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" logger\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n\n\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n")])])]),t("p",[s._v("测试")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#先启动103 否则102发送数据无人接收  在hadoop103操作 ")]),s._v("\nflume-ng agent --conf conf/ --name a1 --conf-file datas/avrosource_loggersink.conf -Dflume.root.logger"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("INFO,console\n")])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在hadoop102操作")]),s._v("\nflume-ng agent --conf conf/ --name a1 --conf-file datas/netcatsource_avrosink.conf -Dflume.root.logger"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("INFO,console\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#在另外个ssh窗口中操作")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("nc")]),s._v(" hadoop102 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22222")]),s._v("\n")])])]),t("h3",{attrs:{id:"复制和多路复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#复制和多路复用"}},[s._v("#")]),s._v(" 复制和多路复用")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211111184918332.png",alt:"image-20211111184918332"}})]),s._v(" "),t("p",[s._v("Flume支持将事件流向一个或者多个目的地。这种模式可以将相同数据复制到多个channel中，或者将不同数据分发到不同的channel中，sink可以选择传送到不同的目的地。")]),s._v(" "),t("h4",{attrs:{id:"实现复制-selector-replicating"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现复制-selector-replicating"}},[s._v("#")]),s._v(" 实现复制  selector=replicating")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211112073258004.png",alt:"image-20211112073258004"}})]),s._v(" "),t("p",[s._v("从指定文件中读取日志 复制转发到个channel中 channel再转发给指定的sink方")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#agent 1  hadoop102")]),s._v("\na1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1\n\na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1 k2\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 c2\n\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#读取hive日志文件")]),s._v("\na1.sources.r1.command "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -F /opt/module/hive/logs/hive.log\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#selector频道选择器 默认为replicating 为复制 不配置type也是这个方案")]),s._v("\na1.sources.r1.selector.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" replicating \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#可选的channel")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#a1.sources.r1.selector.optional = c3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置为arvosink 向指定地址:端口输出数据")]),s._v("\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arvo \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出数据的地址 ")]),s._v("\na1.sinks.k1.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop103\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出数据的地址")]),s._v("\na1.sinks.k1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33333")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#第二个sinks")]),s._v("\na1.sinks.k2.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arvo \na1.sinks.k2.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop104\na1.sinks.k2.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("44444")]),s._v("\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#第二个channel")]),s._v("\na1.channels.c2.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c2.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c2.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#一个sources 对接两个channels")]),s._v("\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 c2\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#每个sinks对应一个channel")]),s._v("\na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\na1.sinks.k2.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c2\n")])])]),t("p",[s._v("sink方1 从hadoop102接收数据 再存储到hdfs中")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#agent2 hadoop103")]),s._v("\na1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1  \na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" avro\na1.sources.r1.bind "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop103\na1.sources.r1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33333")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Describe the sink")]),s._v("\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hdfs\na1.sinks.k1.hdfs.path "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hdfs://hadoop102:8020/flume2/%Y%m%d/%H\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#上传文件的前缀")]),s._v("\na1.sinks.k1.hdfs.filePrefix "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" flume2-\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#是否按照时间滚动文件夹")]),s._v("\na1.sinks.k1.hdfs.round "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#多少时间单位创建一个新的文件夹")]),s._v("\na1.sinks.k1.hdfs.roundValue "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#重新定义时间单位")]),s._v("\na1.sinks.k1.hdfs.roundUnit "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hour\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#是否使用本地时间戳")]),s._v("\na1.sinks.k1.hdfs.useLocalTimeStamp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#积攒多少个Event才flush到HDFS一次")]),s._v("\na1.sinks.k1.hdfs.batchSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置文件类型，可支持压缩")]),s._v("\na1.sinks.k1.hdfs.fileType "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" DataStream\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#多久生成一个新的文件")]),s._v("\na1.sinks.k1.hdfs.rollInterval "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("600")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置每个文件的滚动大小大概是128M")]),s._v("\na1.sinks.k1.hdfs.rollSize "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("134217700")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#文件的滚动与Event数量无关")]),s._v("\na1.sinks.k1.hdfs.rollCount "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n\n\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n")])])]),t("p",[s._v("sink2 从hadoop102接收数据 再通过File_roll sink存储到本地目录中")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#agent3 hadoop104")]),s._v("\na1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1  \na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" avro\na1.sources.r1.bind "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop104\na1.sources.r1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("44444")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#将event数据存储在指定sink为file_roll 本地存储模式")]),s._v("\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" file_roll\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#存放目录 输出的本地目录必须是已经存在的目录")]),s._v("\na1.sinks.k1.sink.directory "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" /opt/module/flume/demo\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#默认为30s 滚动文件 设置为0将不再滚动")]),s._v("\na1.sinks.k1.sink.rollInterval "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),s._v("\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n\n\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n")])])]),t("p",[s._v("启动 先启动103和104的监听 再启动102的监听")]),s._v(" "),t("h4",{attrs:{id:"实现多路复用-selector-multiplexing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现多路复用-selector-multiplexing"}},[s._v("#")]),s._v(" 实现多路复用 selector=multiplexing")]),s._v(" "),t("p",[s._v("agent1")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#agent 1  hadoop102")]),s._v("\na1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1\n\na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1 k2\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 c2\n\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#读取hive日志文件")]),s._v("\na1.sources.r1.command "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -F /opt/module/hive/logs/hive.log\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#复用配置")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#selector频道选择器 默认为replicating  multiplexing为复用  需要配合拦截器使用")]),s._v("\na1.sources.r1.selector.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" multiplexing \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# header的key 根据event的header里面指定key 判断值 分发给哪个channel ")]),s._v("\na1.sources.r1.selector.header "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" state\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#CZ为自定义value值 为上面指定key中对应值 如key中值为CZ 则分发给 c1 channel")]),s._v("\na1.sources.r1.selector.mapping.CZ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#值为US 则分发到 c2 channel")]),s._v("\na1.sources.r1.selector.mapping.US "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c2\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置拦截器 (用于向headers中添加指定键值对)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#拦截器名称")]),s._v("\na1.sources.r1.interceptors "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#拦截器类型 static 向header添加 自定义键值对")]),s._v("\na1.sources.r1.interceptors.i1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" static\na1.sources.r1.interceptors.i1.key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" state\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#多个值只能通过自定义拦截器定义 此处是写死为CZ")]),s._v("\na1.sources.r1.interceptors.i1.value "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" CZ\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#设置为arvosink 向指定地址:端口输出数据")]),s._v("\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arvo \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出数据的地址 ")]),s._v("\na1.sinks.k1.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop103\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#输出数据的地址")]),s._v("\na1.sinks.k1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33333")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#第二个sinks")]),s._v("\na1.sinks.k2.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" arvo \na1.sinks.k2.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop104\na1.sinks.k2.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("44444")]),s._v("\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#第二个channel")]),s._v("\na1.channels.c2.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c2.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c2.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#一个sources 对接两个channels")]),s._v("\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 c2\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#每个sinks对应一个channel")]),s._v("\na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\na1.sinks.k2.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c2\n")])])]),t("p",[s._v("agent2和agent3 与上面复制一样 或 自定义")]),s._v(" "),t("h3",{attrs:{id:"负载均衡和故障转移"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡和故障转移"}},[s._v("#")]),s._v(" 负载均衡和故障转移")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211111185044758.png",alt:"image-20211111185044758"}})]),s._v(" "),t("p",[s._v("Flume支持使用将多个sink逻辑上分到一个sink组，sink组配合不同的SinkProcessor可以实现负载均衡和错误恢复的功能。")]),s._v(" "),t("h4",{attrs:{id:"实现故障转移-processor-failover"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现故障转移-processor-failover"}},[s._v("#")]),s._v(" 实现故障转移  processor=failover")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211112101633912.png",alt:"image-20211112101633912"}})]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#agent1 hadoop102")]),s._v("\na1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1  \na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1 k2\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" netcat \na1.sources.r1.bind "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop102\na1.sources.r1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22222")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sinks1")]),s._v("\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" avro\na1.sinks.k1.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop103\na1.sinks.k1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33333")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sinks2")]),s._v("\na1.sinks.k2.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" avro\na1.sinks.k2.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop104\na1.sinks.k2.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("44444")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#定义sinkgroups")]),s._v("\na1.sinkgroups "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" g1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#该组下面有哪些sink实例")]),s._v("\na1.sinkgroups.g1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1 k2\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#failover为故障转移  默认为一对一")]),s._v("\na1.sinkgroups.g1.processor.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" failover\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#优先级 值越大优先级越大")]),s._v("\na1.sinkgroups.g1.processor.priority.k1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\na1.sinkgroups.g1.processor.priority.k2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sink连接超时时间 默认为30000毫秒")]),s._v("\na1.sinkgroups.g1.processor.maxpenalty "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n\n\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sinks绑定的channel 应为一个")]),s._v("\na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\na1.sinks.k2.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\n\n")])])]),t("h4",{attrs:{id:"实现负载均衡-processor-load-balance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现负载均衡-processor-load-balance"}},[s._v("#")]),s._v(" 实现负载均衡  processor=load_balance")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#agent1 hadoop102")]),s._v("\na1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1  \na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1 k2\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" netcat \na1.sources.r1.bind "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop102\na1.sources.r1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22222")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sinks1")]),s._v("\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" avro\na1.sinks.k1.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop103\na1.sinks.k1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("33333")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sinks2")]),s._v("\na1.sinks.k2.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" avro\na1.sinks.k2.hostname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" hadoop104\na1.sinks.k2.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("44444")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#定义sinkgroups")]),s._v("\na1.sinkgroups "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" g1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#该组下面有哪些sink实例")]),s._v("\na1.sinkgroups.g1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1 k2\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#load_balance 为负载均衡")]),s._v("\na1.sinkgroups.g1.processor.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" load_balance\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认为round_robin轮询sink    random为随机发给某个sink")]),s._v("\na1.sinkgroups.g1.processor.selector "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" random\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#连接超时时间 30000毫秒")]),s._v("\na1.sinkgroups.g1.processor.maxpenalty "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),s._v("\n\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory \na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v(" \na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" \n\n\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sinks绑定的channel 应为一个")]),s._v("\na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\na1.sinks.k2.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\n")])])]),t("h3",{attrs:{id:"聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚合"}},[s._v("#")]),s._v(" 聚合")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211111185129828.png",alt:"image-20211111185129828"}})]),s._v(" "),t("p",[s._v("这种模式是我们最常见的，也非常实用，日常web应用通常分布在上百个服务器，大者甚至上千个、上万个服务器。产生的日志，处理起来也非常麻烦。用flume的这种组合方式能很好的解决这一问题，每台服务器部署一个flume采集日志，传送到一个集中收集日志的flume，再由此flume上传到hdfs、hive、hbase等，进行日志分析。")]),s._v(" "),t("h4",{attrs:{id:"实现聚合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现聚合"}},[s._v("#")]),s._v(" 实现聚合")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211112105001063.png",alt:"image-20211112105001063"}})]),s._v(" "),t("p",[s._v("将分开的agent的sink全部汇总到一个agent上 再进行持久化")]),s._v(" "),t("h2",{attrs:{id:"拦截器-interceptor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拦截器-interceptor"}},[s._v("#")]),s._v(" 拦截器 Interceptor")]),s._v(" "),t("p",[s._v("更多类型拦截器查看官方文档")]),s._v(" "),t("p",[s._v("通过配置文件 配置拦截器 agent名称.sources.r1.interceptors")]),s._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("a1.sources "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" r1\na1.sinks "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" k1\na1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1 \n\na1.sources.r1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" netcat\na1.sources.r1.bind "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" localhost\na1.sources.r1.port "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("44444")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置拦截器 (用于向headers中添加时间戳)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#拦截器名称")]),s._v("\na1.sources.r1.interceptors "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#拦截器类型 timestamp 向header添加时间戳")]),s._v("\na1.sources.r1.interceptors.i1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" timestamp\n\na1.sinks.k1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" logger\n\na1.channels.c1.type "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" memory\na1.channels.c1.capacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\na1.channels.c1.transactionCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n\n\na1.sources.r1.channels "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\na1.sinks.k1.channel "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" c1\n")])])]),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211111194553208.png",alt:"image-20211111194553208"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);