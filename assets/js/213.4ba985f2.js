(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{583:function(e,r,t){"use strict";t.r(r);var a=t(46),v=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"内部原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内部原理"}},[e._v("#")]),e._v(" 内部原理")]),e._v(" "),t("h2",{attrs:{id:"节点类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#节点类型"}},[e._v("#")]),e._v(" "),t("strong",[e._v("节点类型")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211018082746618.png",alt:"image-20211018082746618"}})]),e._v(" "),t("h2",{attrs:{id:"stat结构体"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stat结构体"}},[e._v("#")]),e._v(" Stat结构体")]),e._v(" "),t("p",[e._v("（1）czxid-创建节点的事务zxid")]),e._v(" "),t("p",[e._v("每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。")]),e._v(" "),t("p",[e._v("事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。")]),e._v(" "),t("p",[e._v("（2）ctime - znode被创建的毫秒数(从1970年开始)")]),e._v(" "),t("p",[e._v("（3）mzxid - znode最后更新的事务zxid")]),e._v(" "),t("p",[e._v("（4）mtime - znode最后修改的毫秒数(从1970年开始)")]),e._v(" "),t("p",[e._v("（5）pZxid-znode最后更新的子节点zxid")]),e._v(" "),t("p",[e._v("（6）cversion - znode子节点变化号，znode子节点修改次数")]),e._v(" "),t("p",[e._v("（7）dataversion - znode数据变化号")]),e._v(" "),t("p",[e._v("（8）aclVersion - znode访问控制列表的变化号")]),e._v(" "),t("p",[e._v("（9）ephemeralOwner- 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。")]),e._v(" "),t("p",[e._v("（10）dataLength- znode的数据长度")]),e._v(" "),t("p",[e._v("（11）numChildren - znode子节点数量")]),e._v(" "),t("h2",{attrs:{id:"监听器原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监听器原理"}},[e._v("#")]),e._v(" 监听器原理")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211018091421098.png",alt:"image-20211018091421098"}})]),e._v(" "),t("h2",{attrs:{id:"选举机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选举机制"}},[e._v("#")]),e._v(" 选举机制")]),e._v(" "),t("p",[e._v("（1）半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。")]),e._v(" "),t("p",[e._v("（2）Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。")]),e._v(" "),t("p",[e._v("（3）选举流程")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211018100355663.png",alt:"image-20211018100355663"}})]),e._v(" "),t("p",[e._v("( 1）服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上（3票），选举无法完成，服务器1状态保持为LOOKING；")]),e._v(" "),t("p",[e._v("（2）服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现服务器2的ID比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING")]),e._v(" "),t("p",[e._v("（3）服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；")]),e._v(" "),t("p",[e._v("（4）服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING；")]),e._v(" "),t("p",[e._v("（5）服务器5启动，同4一样当小弟。")]),e._v(" "),t("h2",{attrs:{id:"写数据流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写数据流程"}},[e._v("#")]),e._v(" 写数据流程")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20211018194619116.png",alt:"image-20211018194619116"}})]),e._v(" "),t("ol",[t("li",[e._v("客户向服务端发起请求")]),e._v(" "),t("li",[e._v("请求转发给Leader")]),e._v(" "),t("li",[t("strong",[e._v("Leader")]),e._v("将写请求广播给各个server(即Follower) 进行"),t("strong",[e._v("投票")])]),e._v(" "),t("li",[e._v("投票"),t("strong",[e._v("超半数")]),e._v(" 则进行Leader会向各个server发送提交信息 各个server收到写请求放入队列中 写入数据\n"),t("ol",[t("li",[e._v("如果某个server投不同意 而超过半数投同意票 则此server会进行重启 并向leader重新同步数据")]),e._v(" "),t("li",[e._v("如果server 的 "),t("strong",[e._v("czxid")]),e._v(" 比 leader当前写数据的czxid"),t("strong",[e._v("大")]),e._v(" 则此server会投不同意票 反之投同意票")])])]),e._v(" "),t("li",[e._v("server会进一步通知客户端 写数据成功")])])])}),[],!1,null,null,null);r.default=v.exports}}]);