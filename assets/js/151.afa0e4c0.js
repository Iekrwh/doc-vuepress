(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{525:function(t,a,e){"use strict";e.r(a);var s=e(46),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"re-正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#re-正则表达式"}},[t._v("#")]),t._v(" re 正则表达式")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("re.search(pattern, string)  扫描整个字符串并返回第一个成功的匹配")])]),t._v(" "),e("li",[e("p",[t._v("re.match(pattern, string)  match 只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回 None  而 re.search 匹配整个字符串，直到找到一个匹配。")])]),t._v(" "),e("li",[e("p",[t._v("匹配对象.groups()  返回一个包含所有小组字符串的元组，从 1 到 所含的小组号")])]),t._v(" "),e("li",[e("p",[t._v("匹配对象.group(n)  匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。")])]),t._v(" "),e("li",[e("p",[t._v("re.sub(patten,repl,string,count=0)  re.sub用于替换字符串中的匹配项")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("repl : 替换的字符串，也可为一个函数。")])]),t._v(" "),e("li",[e("p",[t._v("count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。")])]),t._v(" "),e("li",[e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将不以A-Za-z1-9' 的替换成 空格")]),t._v("\nre"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[^A-Za-z1-9\\']'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("rep"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\nhtml "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4月5日0-24时，四川无新增新型冠状病毒肺炎确诊病例，新增治愈出院病例1例，无新增疑似病例，无新增死亡病例。"')]),t._v("\nc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"新增治愈出院病例(\\d+)例"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\d匹配0-9任意数字    .* 匹配最多任意字符贪婪模式只匹配找到的第一个字符   .*?匹配最少任意字符非贪婪模式  并返回所以符合的条件的全部字符 保存到列表")]),t._v("\nc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#re.search(regx,str)  在str中查找满足条件的字符串,匹配不上则返回None")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#使用groups可以获取小括号里所有内容")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#对返回结果可以分组,可在字符串内添加小括号分离数据")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h3",{attrs:{id:"贪婪模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#贪婪模式"}},[t._v("#")]),t._v(" 贪婪模式")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("模式")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配字符串的开头")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("$")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配字符串的末尾。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v(".")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("[...]")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("用来表示一组字符,单独列出：[amk] 匹配 'a'，'m'或'k'")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("[^...]")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("re*")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配0个或多个的表达式。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("re+")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配1个或多个的表达式。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("re?")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("re{ n}")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v('匹配n个前面表达式。例如，"o{2}"不能匹配"Bob"中的"o"，但是能匹配"food"中的两个o。')])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("re{ n,}")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v('精确匹配n个前面表达式。例如，"o{2,}"不能匹配"Bob"中的"o"，但能匹配"foooood"中的所有o。"o{1,}"等价于"o+"。"o{0,}"则等价于"o*"。')])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("re{ n, m}")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("a| b")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配a或b")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(re)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配括号内的表达式，也表示一个组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?imx)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?-imx)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?: re)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("类似 (...), 但是不表示一个组")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?imx: re)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("在括号中使用i, m, 或 x 可选标志")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?-imx: re)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("在括号中不使用i, m, 或 x 可选标志")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?#...)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("注释.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?= re)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?! re)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("(?> re)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配的独立模式，省去回溯。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\w")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配数字字母下划线")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\W")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配非数字字母下划线")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\s")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意空白字符，等价于 [\\t\\n\\r\\f]。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\S")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意非空字符")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\d")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意数字，等价于 [0-9]。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\D")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配任意非数字")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\A")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配字符串开始")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\Z")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\z")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配字符串结束")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\G")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配最后匹配完成的位置。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\b")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配一个单词边界，也就是指单词和空格间的位置。例如， 'er\\b' 可以匹配\"never\" 中的 'er'，但不能匹配 \"verb\" 中的 'er'。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\B")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配非单词边界。'er\\B' 能匹配 \"verb\" 中的 'er'，但不能匹配 \"never\" 中的 'er'。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\n, \\t, 等。")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配一个换行符。匹配一个制表符, 等")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\1...\\9")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配第n个分组的内容。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("\\10")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。")])])])]),t._v(" "),e("p",[t._v(".* 匹配最多任意字符    .*?匹配任意字符贪婪模式 重复运行当前匹配条件")]),t._v(" "),e("div",{staticClass:"language-python extra-class"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" re\nhtml "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('" 当日转为确诊病例0例，当日解除集中隔离医学观察0例。尚在集中隔离医学观察28例（均为境外输入），比前一日增加4例。"')]),t._v("\nc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"确诊病例(\\d+).*?医学观察(\\d+).*?隔离医学观察(\\d+).*前一日增加(\\d+)"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# \\d匹配0-9任意数字    .* 匹配最多任意字符贪心算法    .*?匹配最少任意字符非贪心算法")]),t._v("\nc"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("re"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("search"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("html"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#re.search(regx,str)  在str中查找满足条件的字符串,匹配不上则返回None")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#使用groups可以获取小括号里所有内容")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#对返回结果可以分组,可在字符串内添加小括号分离数据")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("c"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("group"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);