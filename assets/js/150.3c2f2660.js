(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{525:function(e,s,t){"use strict";t.r(s);var v=t(46),_=Object(v.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[e._v("#")]),e._v(" Redis")]),e._v(" "),t("p",[e._v("Redis 是用C语言开发的一个开源的高性能键值对数据库")]),e._v(" "),t("p",[e._v("特征:")]),e._v(" "),t("ol",[t("li",[e._v("数据间没有必然的关联关系")]),e._v(" "),t("li",[e._v("内部采用单线程机制进行工作")]),e._v(" "),t("li",[e._v("高性能")]),e._v(" "),t("li",[e._v("多数据类型支持\n"),t("ul",[t("li",[e._v("字符串类型 string")]),e._v(" "),t("li",[e._v("列表类型 list")]),e._v(" "),t("li",[e._v("双列类型 hash")]),e._v(" "),t("li",[e._v("集合类型 set")]),e._v(" "),t("li",[e._v("有序集合类型 zset/sorted_set")])])]),e._v(" "),t("li",[e._v("支持持久化, 可以进行数据灾难恢复")])]),e._v(" "),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://download.redis.io/releases/redis-6.2.5.tar.gz\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("tar")]),e._v(" -xvf redis-6.2.5.tar.gz \n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" redis-6.2.5\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n\nredis-server  \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# redis-server --port 6380  指定端口 默认为6379")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#客户端")]),e._v("\nredis-cli \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# redis-cli -p 6380")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#创建存放配置和数据目录")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" conf\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" data\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" redis.conf ./conf\n\nfirewall-cmd --zone"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("public --add-port"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6379")]),e._v("/tcp --permanent\n")])])]),t("h2",{attrs:{id:"配置文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[e._v("#")]),e._v(" 配置文件")]),e._v(" "),t("p",[e._v("redis.conf")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("bind")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("192.168")]),e._v(".130.128 "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#绑定对外访问的ip  建议为本机ip  也可注释掉任何主机都可访问")]),e._v("\nprotected-mode no  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#关闭主机保护模式 yes为开启")]),e._v("\nrequirepass "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#设置密码")]),e._v("\nport "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6379")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#客户端闲置等待时间 到时间关闭")]),e._v("\ndaemonize "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("yes")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#后台运行")]),e._v("\nlogfile "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"log-6379.log"')]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#日志文件名")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("dir")]),e._v(" root/redis-6.2.5/data\nmaxclients "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#服务器允许最大连接数 默认为0无限")]),e._v("\nloglevel verbose  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#debug verbose notice waring 四个级别 开发期间为verbose  生产环境配置为notice 降低写日志IO的频度")]),e._v("\n\nredis-server /root/redis-6.2.5/conf/redis.conf \nauth "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("123456")]),e._v("\n")])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#连接")]),e._v("\nredis-cli \nauth "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("12")]),e._v("\n")])])]),t("h2",{attrs:{id:"数据类型指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型指令"}},[e._v("#")]),e._v(" 数据类型指令")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20210826161058600.png",alt:"image-20210826161058600"}})]),e._v(" "),t("p",[e._v("redis 自身是一个 MAP 所有的数据类型都是 键值对形式存储")]),e._v(" "),t("p",[e._v("而数据类型指的value部分的类型 key永远是字符串")]),e._v(" "),t("h3",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[e._v("#")]),e._v(" String")]),e._v(" "),t("p",[e._v("一个存储空间保存一个数据")]),e._v(" "),t("p",[e._v("如果是数字也可以作为数字操作")]),e._v(" "),t("ul",[t("li",[e._v("set key value   添加/修改数据")]),e._v(" "),t("li",[e._v("get key   获取数据")]),e._v(" "),t("li",[e._v("del key  删除数据")]),e._v(" "),t("li",[e._v("setnx key value  判断性添加数据")]),e._v(" "),t("li",[e._v("mset key1 value1 key2 value2 ...   m是Multiple缩写")]),e._v(" "),t("li",[e._v("mget key1 key2 ...  获取多个数据")]),e._v(" "),t("li",[e._v("strlen key  获取数据字符长度")]),e._v(" "),t("li",[e._v("append key value  追加信息到原始信息后面  (如存在则追加 否则新建)")])]),e._v(" "),t("hr"),e._v(" "),t("ul",[t("li",[e._v("incr key  设置数值+1   如果key不存在 则从0开始并新建  只有数字字符串可以")]),e._v(" "),t("li",[e._v("incrby key increment  设置数值+n")]),e._v(" "),t("li",[e._v("incrbyfloat key increment  设置小数增加+n")]),e._v(" "),t("li",[e._v("decr key  设置数值-1")]),e._v(" "),t("li",[e._v("decrby key increment   设置数值减少指定范围")]),e._v(" "),t("li",[e._v("setex key seconds value  设置数值具有指定的生命周期秒  如:setex next 10 hello")]),e._v(" "),t("li",[e._v("psetex key milliseconds value  设置数值具有指定的生命周期毫秒")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("注意事项:")]),e._v(" "),t("ol",[t("li",[e._v("(integer)0 为false  1为成功    也可能为运行的结果值")]),e._v(" "),t("li",[e._v("数据为获取到是 对应为(nil)  === null")]),e._v(" "),t("li",[e._v("数据最大的存储量为 512MB")]),e._v(" "),t("li",[e._v("string在内部存储就是一个字符串  当遇到增减类操作 incr,decr时会转成数值类型进行计算")]),e._v(" "),t("li",[e._v("在操作数值时,如果原始数据不能转成数值或超出了redis数值的范围  将报错 java.long的MAX_VALUE")]),e._v(" "),t("li",[e._v("redis所有操作都是"),t("strong",[e._v("原子性")]),e._v(",采用"),t("strong",[e._v("单线程")]),e._v("处理所有业务,命令都是一个一个执行的,因此无需考虑并发带来的数据影响")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20210826165241002.png",alt:"image-20210826165241002"}})]),e._v(" "),t("h3",{attrs:{id:"hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[e._v("#")]),e._v(" hash")]),e._v(" "),t("p",[e._v("一个存储空间保存多个键值对数据  hash空间里面的key我们通常称为field")]),e._v(" "),t("p",[e._v("如果field数比较少,存储结构会优化为数组,较多时为HashMap结构")]),e._v(" "),t("ul",[t("li",[e._v("hset key field value  添加/修改数据")]),e._v(" "),t("li",[e._v("hget key field  获取数据")]),e._v(" "),t("li",[e._v("hgetall key 获取整个hash")]),e._v(" "),t("li",[e._v("hdel key field1 [field]  删除hash指定的field")]),e._v(" "),t("li",[e._v("hsetnx key field value  设置field, 如果field存在则不做任何操作")]),e._v(" "),t("li",[e._v("hmset key field1 value1 field2 value2  设置多个filed")]),e._v(" "),t("li",[e._v("hmget key field1 field2  获取多个数据")]),e._v(" "),t("li",[e._v("hlen key  获取哈希表中field的数量")]),e._v(" "),t("li",[e._v("hexists key field  判断哈希表是否存在指定的field")])]),e._v(" "),t("hr"),e._v(" "),t("ul",[t("li",[e._v("hkeys key 获取哈希所有的字段名")]),e._v(" "),t("li",[e._v("hvals key 获取哈希所有的字段值")]),e._v(" "),t("li",[e._v("hincrby key field increment  设置指定字段的数值增加指定范围  可以为负数")]),e._v(" "),t("li",[e._v("hincrbyfloat key field increment  设置指定字段的数值增加指定小数范围")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("注意事项:")]),e._v(" "),t("ol",[t("li",[e._v("hash类型中的value只能存储字符串 不允许其他数据类型")]),e._v(" "),t("li",[e._v("每个hash可以存储 2的32次方-1个键值对")]),e._v(" "),t("li",[e._v("hash设计初衷不是为了存储大量对象而设计的  不可以将hash转为对象列表使用")]),e._v(" "),t("li",[e._v("hgetall 操作可以获取全部属性 如果男人field过多 遍历整体数效率就会很低 造成数据访问瓶颈")])]),e._v(" "),t("h3",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" list")]),e._v(" "),t("p",[e._v("一个存储空间保存多个数据 并且根据存储顺序一致  底层使用了双向链表存储结构实现")]),e._v(" "),t("ul",[t("li",[e._v("lpush key value1 [value2] ...   从左添加/删除数据  可以存储多个值")]),e._v(" "),t("li",[e._v("rpush key value1 [value2] ...   从右添加/删除数据")]),e._v(" "),t("li",[e._v("lrange key start stop  获取指定范围的数据   下标从0开  -1为最后一个元素或list长度-1")]),e._v(" "),t("li",[e._v("lindex key index  获取索引的数据  如索引越界则查询为nil")]),e._v(" "),t("li",[e._v("llen key    获取list长度")]),e._v(" "),t("li",[e._v("lpop key   从左获取并移除数据")]),e._v(" "),t("li",[e._v("rpop key  从右获取并移除数据")])]),e._v(" "),t("hr"),e._v(" "),t("ul",[t("li",[e._v("lrem key count value  移除指定个数的指定数据   如删除个数超出总个数 则删除全部指定数据")]),e._v(" "),t("li",[e._v("blpop key1 [key2]  timeout   规定时间内获取并移除数据 秒单位  如果有多key则按顺序获取并移除 只有前面为nil后面的key才会执行 每次执行一次   是一个阻塞队列")]),e._v(" "),t("li",[e._v("brpop key1 [key2]  timeout   规定时间内获取并移除数据")]),e._v(" "),t("li",[e._v("brpoppush source destination timeout   将a列表push到b列表中")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("注意事项:")]),e._v(" "),t("ol",[t("li",[e._v("list数据都是string类型  最多2的32次方-1个元素")]),e._v(" "),t("li",[e._v("list有索引的概念, 但操作数据通常以队列形式入队出队 或以栈的形式")]),e._v(" "),t("li",[e._v("获取全部数据的操作结束索引为-1")]),e._v(" "),t("li",[e._v("list可以对数据进行分页操作  第一页数据来源list 而第二页后的通常以数据库形式加载")])]),e._v(" "),t("h3",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[e._v("#")]),e._v(" set")]),e._v(" "),t("p",[e._v("set与hash存储结构完全相同,但set"),t("strong",[e._v("只存储键")]),e._v(",不存储值 值为nil  并且值是不允许重复的")]),e._v(" "),t("ul",[t("li",[e._v("sadd key member1 [member2]  添加数据")]),e._v(" "),t("li",[e._v("smembers key  获取全部数据")]),e._v(" "),t("li",[e._v("srem key member1 [member2]   删除指定数据")]),e._v(" "),t("li",[e._v("scard key  获取集合数据总量")]),e._v(" "),t("li",[e._v("sismember key member 判断集合中是否包含指定数据")]),e._v(" "),t("li",[e._v("srandmember key [count]   随机获取集合中指定数量的数据")]),e._v(" "),t("li",[e._v("spop key [count]   随机获取集合中的某个数据并移除出集合")])]),e._v(" "),t("hr"),e._v(" "),t("ul",[t("li",[e._v("sinter key1 [key2 ...]  求两个集合的交集")]),e._v(" "),t("li",[e._v("sunion  key1 [key2 ...]  求两个集合的并集")]),e._v(" "),t("li",[e._v("sdiff   key1 [key2 ...]  求两个集合的差集")]),e._v(" "),t("li",[e._v("sinterstore destination key [key2 ...]  求两个集合的交集并存储到指定集合中")]),e._v(" "),t("li",[e._v("sunionstore destination key [key2 ...]  求两个集合的并集并存储到指定集合中")]),e._v(" "),t("li",[e._v("sdiffstore destination key [key2 ...]  求两个集合的差集并存储到指定集合中")]),e._v(" "),t("li",[e._v("smove source destination  member 将指定数据从A集合移动到B集合")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("注意事项:")]),e._v(" "),t("ol",[t("li",[e._v("set不允许数据重复")]),e._v(" "),t("li",[e._v("set虽然和hash的存储结构相同 , 但无法使用存储值的空间")])]),e._v(" "),t("h2",{attrs:{id:"常用指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用指令"}},[e._v("#")]),e._v(" 常用指令")]),e._v(" "),t("h3",{attrs:{id:"key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key"}},[e._v("#")]),e._v(" key")]),e._v(" "),t("ul",[t("li",[e._v("del key 删除指定key")]),e._v(" "),t("li",[e._v("exists key 判断key是否存在")]),e._v(" "),t("li",[e._v("type key 获取key的类型")]),e._v(" "),t("li",[e._v("sort  key 排序 默认对数字排序   如果要按自然排序则 需要指定 alpha   查询出来是排序  原数据不做改变  并且可以根据 ASC|DESC 指定升降序")]),e._v(" "),t("li",[e._v("rename key new key 重命名")]),e._v(" "),t("li",[e._v("renamenx key newkey  存在则修改 否则不做任何操作")])]),e._v(" "),t("hr"),e._v(" "),t("ul",[t("li",[e._v("expire key seconds  为指定key设置有效期 秒")]),e._v(" "),t("li",[e._v("pexpire key milliseconds 为指定key设置有效期 毫秒")]),e._v(" "),t("li",[e._v("expireat key timestamp 时间戳")]),e._v(" "),t("li",[e._v("pexpireat key milliseconds-timestamp 毫秒级时间戳")]),e._v(" "),t("li",[e._v("ttl key  获取key的有效时间   秒 -1为永久  -2为不存在")]),e._v(" "),t("li",[e._v("pttl key  获取key的有效时间 毫秒")]),e._v(" "),t("li",[e._v("persist key   将此key转为永久性")]),e._v(" "),t("li",[e._v("keys pattern  表达式查询\n"),t("ul",[t("li",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20210826182133398.png",alt:"image-20210826182133398"}})])])])]),e._v(" "),t("h3",{attrs:{id:"db"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#db"}},[e._v("#")]),e._v(" db")]),e._v(" "),t("p",[e._v("rdis服务器默认提供16个数据库  从0到15  默认为0 每个数据库之间的数据相互独立")]),e._v(" "),t("ul",[t("li",[e._v("select index  切换数据库")]),e._v(" "),t("li",[e._v("ping 测试与服务器是否连同 发送消息")]),e._v(" "),t("li",[e._v("move key db 数据移动")]),e._v(" "),t("li",[e._v("dbsize  当前数据库key总量")]),e._v(" "),t("li",[e._v("flushdb  当前数据库清除")]),e._v(" "),t("li",[e._v("flushall   全部数据库清除")])])])}),[],!1,null,null,null);s.default=_.exports}}]);