(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{490:function(v,_,t){"use strict";t.r(_);var a=t(46),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"面向对象基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面向对象基础"}},[v._v("#")]),v._v(" 面向对象基础")]),v._v(" "),t("h2",{attrs:{id:"类和对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类和对象"}},[v._v("#")]),v._v(" 类和对象")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("面向对象   指计算机关注的目标")])]),v._v(" "),t("li",[t("p",[v._v("类")]),v._v(" "),t("p",[v._v("类是对象的数据类型")]),v._v(" "),t("p",[v._v("类是具有相同属性和行为的一组对象的集合")])]),v._v(" "),t("li",[t("p",[v._v("对象的属性")]),v._v(" "),t("p",[v._v("对象具有的各种特征，每个属性大都拥有特定的值")])]),v._v(" "),t("li",[t("p",[v._v("对象的行为")]),v._v(" "),t("p",[v._v("对象能够执行的操作")])])]),v._v(" "),t("p",[v._v("类是对象的抽象，对象是类的实体")]),v._v(" "),t("h2",{attrs:{id:"类的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的定义"}},[v._v("#")]),v._v(" 类的定义")]),v._v(" "),t("p",[v._v("类是java程序的基本组成单位")]),v._v(" "),t("p",[v._v("public class 类名{")]),v._v(" "),t("p",[v._v("​\t//成员变量")]),v._v(" "),t("p",[v._v("​\t变量1的数据类型 变量1;")]),v._v(" "),t("p",[v._v("​\t变量2的数据类型 变量2;")]),v._v(" "),t("p",[v._v("​\t//成员方法")]),v._v(" "),t("p",[v._v("​\t方法1;")]),v._v(" "),t("p",[v._v("}")]),v._v(" "),t("h2",{attrs:{id:"对象的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的使用"}},[v._v("#")]),v._v(" 对象的使用")]),v._v(" "),t("p",[v._v("创建对象")]),v._v(" "),t("p",[v._v("类名 对象名 = new 类名();")]),v._v(" "),t("p",[v._v("ObjectTest01 P =new ObjectTest01();")]),v._v(" "),t("p",[v._v("使用对象")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("使用成员变量")]),v._v(" "),t("p",[v._v("格式：对象名.变量名")]),v._v(" "),t("p",[v._v("​\t\t\tp.barand")])]),v._v(" "),t("li",[t("p",[v._v("使用成员方法")]),v._v(" "),t("p",[v._v("格式：对象名.方法名")]),v._v(" "),t("p",[v._v("​\t\t\tp.call()")])])]),v._v(" "),t("h2",{attrs:{id:"对象内存图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象内存图"}},[v._v("#")]),v._v(" 对象内存图")]),v._v(" "),t("h3",{attrs:{id:"单个对象-new-一个内存地址-独有的-指向类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单个对象-new-一个内存地址-独有的-指向类"}},[v._v("#")]),v._v(" 单个对象 new 一个内存地址（独有的） 指向类")]),v._v(" "),t("p",[v._v("成员变量 和 成员方法都是独用的不与其他发生冲突，只是指向调用")]),v._v(" "),t("p",[v._v("成员方法 对象调用执行完后 会从栈内存消失（清空）")]),v._v(" "),t("h3",{attrs:{id:"多个对象-第一个对象new一个内存地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个对象-第一个对象new一个内存地址"}},[v._v("#")]),v._v(" 多个对象 第一个对象new一个内存地址")]),v._v(" "),t("p",[v._v("第二个对象 new一个内存地址")]),v._v(" "),t("p",[v._v("两个对象分别指向不同的内存地址但方法和代码相同，互相之前无影响")]),v._v(" "),t("p",[v._v("如还有对象申请新的内存还是无影响，各走各的")]),v._v(" "),t("h3",{attrs:{id:"多个对象指向相同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个对象指向相同"}},[v._v("#")]),v._v(" 多个对象指向相同")]),v._v(" "),t("p",[v._v("第一个对象new一个内存地址")]),v._v(" "),t("p",[v._v("将第一个对象的地址赋值给第二个对象")]),v._v(" "),t("p",[v._v("两个对象指向的内存地址都是相同的，因为第二个对象的内存是由第一个对象申请的内存赋值的")]),v._v(" "),t("p",[v._v("第一个对象  申请新的内存地址")]),v._v(" "),t("p",[v._v("ObjectTest01 P =new ObjectTest01();")]),v._v(" "),t("p",[v._v("第二个对象  将第一个对象申请的内存地址赋值给第二个对象使用")]),v._v(" "),t("p",[v._v("ObjectTest01 P2 = p;")]),v._v(" "),t("h2",{attrs:{id:"成员变量和局部变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#成员变量和局部变量"}},[v._v("#")]),v._v(" 成员变量和局部变量")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/Iekrwh/md-images/raw/master/images/image-20210509204442710-1620564285559.png",alt:"image-20210509204442710"}})]),v._v(" "),t("h2",{attrs:{id:"封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[v._v("#")]),v._v(" 封装")]),v._v(" "),t("p",[v._v("private关键字")]),v._v(" "),t("p",[v._v("是一个权限修饰符，可以修饰成员(成员变量和成员方法)")]),v._v(" "),t("p",[v._v("作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问")]),v._v(" "),t("p",[v._v("如需要类外部使用则需要定义java内部方法 get/set方法")]),v._v(" "),t("p",[v._v("​\t\t\t\t\t\t\tset 被修饰的变量名 首字母要大写如setAge")]),v._v(" "),t("p",[v._v("格式: pulic void setXxx(数据类型 变量){")]),v._v(" "),t("p",[v._v("​")]),v._v(" "),t("p",[v._v("}")]),v._v(" "),t("p",[v._v("set是传递参数")]),v._v(" "),t("p",[v._v("get是返回参数")]),v._v(" "),t("p",[v._v("​\t\t\tget\t被修饰的变量名 首字母要大写如getAge")]),v._v(" "),t("p",[v._v("pulic 返回值的类型 getXxx (){")]),v._v(" "),t("p",[v._v("​\t\treturn 被修饰的变量名")]),v._v(" "),t("p",[v._v("}")]),v._v(" "),t("p",[v._v("​")]),v._v(" "),t("p",[v._v("类外直接")]),v._v(" "),t("h2",{attrs:{id:"this关键字使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#this关键字使用"}},[v._v("#")]),v._v(" this关键字使用")]),v._v(" "),t("p",[v._v("用this修饰的变量用于指代成员变量")]),v._v(" "),t("p",[v._v("如在类方法中 参数和成员变量名称一致则系统认为代码指代的为方法中的局部变量（形参），需要加this修饰指代为成员变量")]),v._v(" "),t("p",[v._v("this 解决局部变量隐藏成员变量")]),v._v(" "),t("p",[v._v("方法被哪个对象调用了，this就代表哪个对象")]),v._v(" "),t("h2",{attrs:{id:"封装概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封装概念"}},[v._v("#")]),v._v(" 封装概念")]),v._v(" "),t("p",[v._v("封装是面向对象三大特征之一（封装，继承，多态）")]),v._v(" "),t("p",[v._v("封装的原则")]),v._v(" "),t("p",[v._v("将类的某些信息隐藏在类内部，不允许外部直接访问，而是通过类提供的方法来实现对隐藏信息的操作和访问")]),v._v(" "),t("p",[v._v("成员变量private，提供对应的getXxx()/setXxx()方法")]),v._v(" "),t("p",[v._v("封装的好处")]),v._v(" "),t("p",[v._v("通过方法来控制成员变量的操作，提高了代码的安全性")]),v._v(" "),t("p",[v._v("把代码用方法进行封装，提高了代码的复用性。")]),v._v(" "),t("h2",{attrs:{id:"构造方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[v._v("#")]),v._v(" 构造方法")]),v._v(" "),t("p",[v._v("构造方法是一种特殊的方法")]),v._v(" "),t("p",[v._v("作用：创建对象   主要是完成对象数据的初始化")]),v._v(" "),t("p",[v._v("public class 类名{")]),v._v(" "),t("p",[v._v("​\t\t修饰符 类名(参数){")]),v._v(" "),t("p",[v._v("​\t}")]),v._v(" "),t("p",[v._v("}")]),v._v(" "),t("p",[v._v("注意事项")]),v._v(" "),t("p",[v._v("构造方法的创建")]),v._v(" "),t("p",[v._v("当类中没有创建无参构造方法系统默认的自动生成无参构造方法")]),v._v(" "),t("p",[v._v("如果定义了构造方法，系统将不再提供默认的构造方法")]),v._v(" "),t("p",[v._v("pubilc 类名(参数){")]),v._v(" "),t("p",[v._v("}")]),v._v(" "),t("p",[v._v("构造方法的重载")]),v._v(" "),t("p",[v._v("如果定义了带参数的构造方法，还要使用无参构造方法，必须再写一个无参数构造方法，因为系统不再提供默认的无参数构造方法")]),v._v(" "),t("p",[v._v("建议无论是否使用，都手工书写无参构造方法")])])}),[],!1,null,null,null);_.default=s.exports}}]);