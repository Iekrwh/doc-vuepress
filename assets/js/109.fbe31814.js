(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{481:function(t,v,_){"use strict";_.r(v);var a=_(46),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),_("p",[t._v("概述")]),t._v(" "),_("p",[t._v("接口是一种公共的规范标准,只要符合规范标准,都是通用,java中的接口更多提醒在对行为的抽象")]),t._v(" "),_("h2",{attrs:{id:"特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),_("p",[t._v("使用关键字 interface 修饰")]),t._v(" "),_("p",[t._v("如:public interface 接口名{}")]),t._v(" "),_("p",[t._v("类实现接口(类似继承)用implements关键字")]),t._v(" "),_("p",[t._v("如:public class 类名 implements 接口名{}")]),t._v(" "),_("p",[t._v("接口不能被实例化,跟多态的方式一样,通过类对象实例化,称为接口多态")]),t._v(" "),_("p",[t._v("多态的形式:具体类多态,抽象类多态,接口多态")]),t._v(" "),_("p",[t._v("多态的前提:")]),t._v(" "),_("ol",[_("li",[t._v("有继承或实现关系;")]),t._v(" "),_("li",[t._v("有方法重写;")]),t._v(" "),_("li",[t._v("有父类或接口引用指向 子类或实现 类对象")])]),t._v(" "),_("h2",{attrs:{id:"成员特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#成员特点"}},[t._v("#")]),t._v(" 成员特点")]),t._v(" "),_("p",[t._v("成员变量: 只能常量    默认修饰符:public static final")]),t._v(" "),_("p",[t._v("构造方法:接口没有构造方法,因为接口的主要是对行为进行抽象的,是没有具体存在")]),t._v(" "),_("p",[t._v("一个类如果没有父类,默认继承自object类")]),t._v(" "),_("p",[t._v("成员方法:只能是抽象方法  默认修饰符:public abstract")])])}),[],!1,null,null,null);v.default=e.exports}}]);