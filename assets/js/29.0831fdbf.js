(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{400:function(t,s,a){"use strict";a.r(s);var e=a(46),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询"}},[t._v("#")]),t._v(" 查询")]),t._v(" "),a("p",[t._v("先创建部门表和员工表")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exists")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\ndeptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\ndname string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nloc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" format delimited "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fields")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("terminated")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\t'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("not")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("exists")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\nempno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nename string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\njob string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nmgr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nhiredate string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \nsal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \ncomm "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\ndeptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" format delimited "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fields")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("terminated")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\t'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("导入数据")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("load data "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" inpath "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/opt/module/datas/dept.txt'")]),t._v(" into table dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nload data "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v(" inpath "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/opt/module/datas/emp.txt'")]),t._v(" into table emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("查询")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 全表查询")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ename "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 特定列查询")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" empno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" pno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ename "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 起列别名 as可以省略")]),t._v("\n")])])]),a("h2",{attrs:{id:"算术运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算术运算符"}},[t._v("#")]),t._v(" 算术运算符")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("运算符")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("A+B")]),t._v(" "),a("td",[t._v("A和B 相加")])]),t._v(" "),a("tr",[a("td",[t._v("A-B")]),t._v(" "),a("td",[t._v("A减去B")])]),t._v(" "),a("tr",[a("td",[t._v("A*B")]),t._v(" "),a("td",[t._v("A和B 相乘")])]),t._v(" "),a("tr",[a("td",[t._v("A/B")]),t._v(" "),a("td",[t._v("A除以B")])]),t._v(" "),a("tr",[a("td",[t._v("A%B")]),t._v(" "),a("td",[t._v("A对B取余")])]),t._v(" "),a("tr",[a("td",[t._v("A&B")]),t._v(" "),a("td",[t._v("A和B按位取与")])]),t._v(" "),a("tr",[a("td",[t._v("A|B")]),t._v(" "),a("td",[t._v("A和B按位取或")])]),t._v(" "),a("tr",[a("td",[t._v("A^B")]),t._v(" "),a("td",[t._v("A和B按位取异或")])]),t._v(" "),a("tr",[a("td",[t._v("~A")]),t._v(" "),a("td",[t._v("A按位取反")])])])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"常用函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用函数"}},[t._v("#")]),t._v(" 常用函数")]),t._v(" "),a("h3",{attrs:{id:"udf函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#udf函数"}},[t._v("#")]),t._v(" UDF函数")]),t._v(" "),a("p",[t._v("给定一个输入 返回一个输出")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" substring"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"udaf函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#udaf函数"}},[t._v("#")]),t._v(" UDAF函数")]),t._v(" "),a("p",[t._v("给定多个输入 返回一个输出  聚合函数")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 统计个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" max_sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 此列最大值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" min_sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 此列最小值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" sum_sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 此列总和")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" avg_sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 平均数")]),t._v("\n")])])]),a("h3",{attrs:{id:"udtf函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#udtf函数"}},[t._v("#")]),t._v(" UDTF函数")]),t._v(" "),a("p",[t._v("表生成函数 给定一个输入 返回多个输出")]),t._v(" "),a("h2",{attrs:{id:"limit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limit"}},[t._v("#")]),t._v(" Limit")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("limit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 取前n行")]),t._v("\n")])])]),a("h2",{attrs:{id:"where"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where"}},[t._v("#")]),t._v(" Where")]),t._v(" "),a("p",[t._v("条件语句")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("操作符")]),t._v(" "),a("th",[t._v("支持的数据类型")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("A=B")]),t._v(" "),a("td",[t._v("基本数据类型")]),t._v(" "),a("td",[t._v("如果A等于B则返回TRUE，反之返回FALSE")])]),t._v(" "),a("tr",[a("td",[t._v("A<=>B")]),t._v(" "),a("td",[t._v("基本数据类型")]),t._v(" "),a("td",[t._v("如果A和B都为NULL，则返回TRUE，如果一边为NULL，返回False")])]),t._v(" "),a("tr",[a("td",[t._v("A<>B, A!=B")]),t._v(" "),a("td",[t._v("基本数据类型")]),t._v(" "),a("td",[t._v("A或者B为NULL则返回NULL；如果A不等于B，则返回TRUE，反之返回FALSE")])]),t._v(" "),a("tr",[a("td",[t._v("A<B")]),t._v(" "),a("td",[t._v("基本数据类型")]),t._v(" "),a("td",[t._v("A或者B为NULL，则返回NULL；如果A小于B，则返回TRUE，反之返回FALSE")])]),t._v(" "),a("tr",[a("td",[t._v("A<=B")]),t._v(" "),a("td",[t._v("基本数据类型")]),t._v(" "),a("td",[t._v("A或者B为NULL，则返回NULL；如果A小于等于B，则返回TRUE，反之返回FALSE")])]),t._v(" "),a("tr",[a("td",[t._v("A>B")]),t._v(" "),a("td",[t._v("基本数据类型")]),t._v(" "),a("td",[t._v("A或者B为NULL，则返回NULL；如果A大于B，则返回TRUE，反之返回FALSE")])]),t._v(" "),a("tr",[a("td",[t._v("A>=B")]),t._v(" "),a("td",[t._v("基本数据类型")]),t._v(" "),a("td",[t._v("A或者B为NULL，则返回NULL；如果A大于等于B，则返回TRUE，反之返回FALSE")])]),t._v(" "),a("tr",[a("td",[t._v("A [NOT] BETWEEN B  AND C")]),t._v(" "),a("td",[t._v("基本数据类型")]),t._v(" "),a("td",[t._v("如果A，B或者C任一为NULL，则结果为NULL。如果A的值大于等于B而且小于或等于C，则结果为TRUE，反之为FALSE。如果使用NOT关键字则可达到相反的效果。")])]),t._v(" "),a("tr",[a("td",[t._v("A IS NULL")]),t._v(" "),a("td",[t._v("所有数据类型")]),t._v(" "),a("td",[t._v("如果A等于NULL，则返回TRUE，反之返回FALSE")])]),t._v(" "),a("tr",[a("td",[t._v("A IS NOT NULL")]),t._v(" "),a("td",[t._v("所有数据类型")]),t._v(" "),a("td",[t._v("如果A不等于NULL，则返回TRUE，反之返回FALSE")])]),t._v(" "),a("tr",[a("td",[t._v("IN(数值1, 数值2)")]),t._v(" "),a("td",[t._v("所有数据类型")]),t._v(" "),a("td",[t._v("使用 IN运算显示列表中的值")])]),t._v(" "),a("tr",[a("td",[t._v("A [NOT] LIKE B")]),t._v(" "),a("td",[t._v("STRING 类型")]),t._v(" "),a("td",[t._v("B是一个SQL下的简单正则表达式，也叫通配符模式，如果A与其匹配的话，则返回TRUE；反之返回FALSE。B的表达式说明如下：‘x%’表示A必须以字母‘x’开头，‘%x’表示A必须以字母’x’结尾，而‘%x%’表示A包含有字母’x’,可以位于开头，结尾或者字符串中间。如果使用NOT关键字则可达到相反的效果。")])]),t._v(" "),a("tr",[a("td",[t._v("A RLIKE B, A  REGEXP B")]),t._v(" "),a("td",[t._v("STRING 类型")]),t._v(" "),a("td",[t._v("B是基于java的正则表达式，如果A与其匹配，则返回TRUE；反之返回FALSE。匹配使用的是JDK中的正则表达式接口实现的，因为正则也依据其中的规则。例如，正则表达式必须和整个字符串A相匹配，而不是只需与其字符串匹配。")])])])]),t._v(" "),a("h3",{attrs:{id:"like和rlike"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#like和rlike"}},[t._v("#")]),t._v(" Like和Rlike")]),t._v(" "),a("p",[t._v("Like是通配符匹配")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" ename "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("like")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A%"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 通配符 %_   %零个或多个字符 _单个字符 ")]),t._v("\n")])])]),a("p",[t._v("Rlike是正则表达式匹配")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" ename "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("rlike")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 正则匹配 ")]),t._v("\n")])])]),a("h3",{attrs:{id:"逻辑运算符-and-or-not"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符-and-or-not"}},[t._v("#")]),t._v(" 逻辑运算符（And/Or/Not）")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("操作符")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("AND")]),t._v(" "),a("td",[t._v("逻辑并")])]),t._v(" "),a("tr",[a("td",[t._v("OR")]),t._v(" "),a("td",[t._v("逻辑或")])]),t._v(" "),a("tr",[a("td",[t._v("NOT")]),t._v(" "),a("td",[t._v("逻辑否")])])])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" sal"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" deptno"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[t._v("#")]),t._v(" 分组")]),t._v(" "),a("h3",{attrs:{id:"group-by语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#group-by语句"}},[t._v("#")]),t._v(" Group By语句")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" avg_sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp t "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 按deptno分组")]),t._v("\n")])])]),a("h3",{attrs:{id:"having语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#having语句"}},[t._v("#")]),t._v(" Having语句")]),t._v(" "),a("p",[t._v("where后面不能写分组函数，而having后面可以使用分组函数。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" avg_sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("group")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" deptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("having")]),t._v(" avg_sal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("mysql执行顺序:")]),t._v(" "),a("ol",[a("li",[t._v("from")]),t._v(" "),a("li",[t._v("where")]),t._v(" "),a("li",[t._v("group by")]),t._v(" "),a("li",[t._v("select")]),t._v(" "),a("li",[t._v("having")]),t._v(" "),a("li",[t._v("order by")]),t._v(" "),a("li",[t._v("limit")])]),t._v(" "),a("h2",{attrs:{id:"join"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#join"}},[t._v("#")]),t._v(" Join")]),t._v(" "),a("p",[t._v("Hive支持通常的SQL JOIN语句，但是只支持等值连接，不支持非等值连接")]),t._v(" "),a("h3",{attrs:{id:"内连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内连接"}},[t._v("#")]),t._v(" 内连接")]),t._v(" "),a("p",[t._v("内连接：只有进行连接的两个表中都存在与连接条件相匹配的数据才会被保留下来。")]),t._v(" "),a("p",[t._v("只有查询表和join表同时存在才保存")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" dept d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"左外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#左外连接"}},[t._v("#")]),t._v(" 左外连接")]),t._v(" "),a("p",[t._v("左外连接：JOIN操作符左边表中符合WHERE子句的所有记录将会被返回。")]),t._v(" "),a("p",[t._v("就算了查询表在join没有符合的数据 也会返回查询结果")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("left")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" dept d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"右外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#右外连接"}},[t._v("#")]),t._v(" 右外连接")]),t._v(" "),a("p",[t._v("右外连接：JOIN操作符右边表中符合WHERE子句的所有记录将会被返回。")]),t._v(" "),a("p",[t._v("如果join表中有查询表没有的数据 也会被保存下来")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("right")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" dept d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"满外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#满外连接"}},[t._v("#")]),t._v(" 满外连接")]),t._v(" "),a("p",[t._v("满外连接：将会返回所有表中符合WHERE语句条件的所有记录。如果任一表的指定字段没有符合条件的值的话，那么就使用NULL值替代。")]),t._v(" "),a("p",[t._v("左右表其中一方没有的都会被保存下 使用null代替")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("full")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("join")]),t._v(" dept d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"多表连接查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多表连接查询"}},[t._v("#")]),t._v(" 多表连接查询")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loc_name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v("   emp e \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v("   dept d\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v("     d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deptno \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v("   location l\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v("     d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("loc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"笛卡尔积"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#笛卡尔积"}},[t._v("#")]),t._v(" 笛卡尔积")]),t._v(" "),a("p",[t._v("（1）省略连接条件 (即左表每个数据都会连接右表的每条数据   左表*右边)")]),t._v(" "),a("p",[t._v("（2）连接条件无效")]),t._v(" "),a("p",[t._v("（3）所有表中的所有行互相连接")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" empno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dname "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dept"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[t._v("#")]),t._v(" 排序")]),t._v(" "),a("h3",{attrs:{id:"全局排序-order-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局排序-order-by"}},[t._v("#")]),t._v(" 全局排序（Order By）")]),t._v(" "),a("p",[t._v("全局排序，只有一个Reducer")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 多条件排序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" \ndeptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("asc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nsal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("ASC（ascend）: 升序（默认）")]),t._v(" "),a("li",[t._v("DESC（descend）: 降序")]),t._v(" "),a("li",[t._v("不推荐对所有数据排序  通常通过limit 求前n个  减少MapReduce工作量")])]),t._v(" "),a("h3",{attrs:{id:"内部排序-sort-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部排序-sort-by"}},[t._v("#")]),t._v(" 内部排序(Sort By)")]),t._v(" "),a("p",[t._v("对于大规模的数据集order by的效率非常低。在很多情况下，并不需要全局排序，此时可以使用"),a("strong",[t._v("sort by")]),t._v("。")]),t._v(" "),a("p",[t._v("Sort by为每个reducer产生一个排序文件。每个Reducer内部进行排序，对全局结果集来说不是排序。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" mapreduce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reduces"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置reduce个数 默认为-1 即一个reduce")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" mapreduce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("job"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reduces"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询reduce个数")]),t._v("\n")])])]),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp sort "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" deptno "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"分区排序-distribute-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分区排序-distribute-by"}},[t._v("#")]),t._v(" 分区排序(Distribute By)")]),t._v(" "),a("p",[t._v("对于distribute by进行测试，一定要"),a("strong",[t._v("分配多reduce")]),t._v("进行处理，否则无法看到distribute by的效果。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp\ndistribute "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" empno\nsort "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" sal "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("desc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 按empno分区排序 再按 sal内部排序")]),t._v("\n")])])]),a("ul",[a("li",[t._v("distribute by的分区规则是根据分区"),a("strong",[t._v("字段的hash码")]),t._v("与"),a("strong",[t._v("reduce的个数")]),t._v("进行"),a("strong",[t._v("模除")]),t._v("后，"),a("strong",[t._v("余数")]),t._v("相同的分到一个区。")]),t._v(" "),a("li",[t._v("Hive要求DISTRIBUTE BY语句要写在SORT BY语句"),a("strong",[t._v("之前")])])]),t._v(" "),a("h3",{attrs:{id:"桶排序-cluster-by"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桶排序-cluster-by"}},[t._v("#")]),t._v(" 桶排序(Cluster By)")]),t._v(" "),a("p",[a("strong",[t._v("当distribute by和sorts by字段相同时")]),t._v("，可以使用cluster by方式。")]),t._v(" "),a("p",[t._v("cluster by除了具有distribute by的功能外还兼具sort by的功能。但是排序只能是升序排序，不能指定排序规则为ASC或者DESC。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp cluster "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 等同于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" emp distribute "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" deptno sort "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" deptno"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"分桶表和抽样查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分桶表和抽样查询"}},[t._v("#")]),t._v(" 分桶表和抽样查询")]),t._v(" "),a("p",[t._v("创建分桶表")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("create")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" stu_buck"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("clustered")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" buckets\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("row")]),t._v(" format delimited "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fields")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("terminated")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("by")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\t'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("hive3中支持从本地上传 reduce会自动帮我们分桶")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("load")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("data")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" inpath "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/opt/module/datas/student.txt"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("table")]),t._v(" stu_buck"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果导入卡住 尝试临时换成mr引擎")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" hive.execution.engine "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("分桶可以使 无法分区的表进行分桶 (分区无法使用主键分区 因为主键是唯一)")]),t._v(" "),a("li",[t._v("每个桶 对应则一个文件")]),t._v(" "),a("li",[t._v("数据存放位置会根据 列值 + 桶数 来存放")])]),t._v(" "),a("h3",{attrs:{id:"抽样查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽样查询"}},[t._v("#")]),t._v(" 抽样查询")]),t._v(" "),a("p",[t._v("对于非常大的数据集，有时用户需要使用的是一个具有代表性的查询结果而不是全部结果。Hive可以通过对表进行抽样来满足这个需求。")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" stu_buck tablesample"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bucket "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("out")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("on")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 根据查询结果 按id分成4份 从中取出第一份出来")]),t._v("\n")])])]),a("ul",[a("li",[t._v("TABLESAMPLE(BUCKET x OUT OF y)   x的值必须小于等于y的值，否则报错")]),t._v(" "),a("li",[t._v("分桶表可以加快抽样效率")])]),t._v(" "),a("p",[t._v("y必须是table总bucket数的倍数或者因子。hive根据y的大小，决定抽样的比例。例如，table总共分了4份，当y=2时，抽取(4/2=)2个bucket的数据，当y=8时，抽取(4/8=)1/2个bucket的数据。")]),t._v(" "),a("p",[t._v("x表示从哪个bucket开始抽取，如果需要取多个分区，以后的分区号为当前分区号加上y。例如，table总bucket数为4，tablesample(bucket 1 out of 2)，表示总共抽取（4/2=）2个bucket的数据，抽取第1(x)个和第3(x+y)个bucket的数据。")])])}),[],!1,null,null,null);s.default=r.exports}}]);